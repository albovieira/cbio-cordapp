package cbio.workflows;

import co.paralleluniverse.fibers.Suspendable;
import com.google.common.collect.ImmutableList;
import cbio.contracts.CbioContract;
import cbio.contracts.CbioState;
import net.corda.core.contracts.StateAndRef;
import net.corda.core.flows.*;
import net.corda.core.identity.Party;
import net.corda.core.transactions.SignedTransaction;
import net.corda.core.transactions.TransactionBuilder;
import net.corda.core.utilities.ProgressTracker;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

@InitiatingFlow
@StartableByRPC
public class CbioMoveFlowInitiator extends FlowLogic<SignedTransaction> {
    private final Party newOwner;
    private final int amount;
    private final int paidValue;

    public CbioMoveFlowInitiator(Party newOwner, int amount, int paidValue) {
        this.newOwner = newOwner;
        this.amount = amount;
        this.paidValue = paidValue;
    }

    private final ProgressTracker progressTracker = new ProgressTracker();

    @Override
    public ProgressTracker getProgressTracker() {
        return progressTracker;
    }

    @Suspendable
    @Override
    public SignedTransaction call() throws FlowException {
        final Party ANP = getServiceHub().getNetworkMapCache().getPeerByLegalName(Constants.ANP);
        if (ANP != null && ANP.getName().equals(getOurIdentity().getName())) {
            throw new FlowException("Invalid node");
        }

        // get all output states not consumed
        List<StateAndRef<CbioState>> allTokenStateAndRefs =
                getServiceHub().getVaultService().queryBy(CbioState.class).getStates();

        AtomicInteger totalTokenAvailable = new AtomicInteger();
        List<StateAndRef<CbioState>> inputStateAndRef = new ArrayList<>();
        AtomicInteger change = new AtomicInteger(0);

        // 1000

        // iteract into all outputs and increment value to set the input state value of transfer
        // and generate an ouput state with new balance
        List<StateAndRef<CbioState>> tokenStateAndRefs =  allTokenStateAndRefs.stream()
                .peek(tokenStateStateAndRef -> {
                    if(totalTokenAvailable.get() < amount)
                        inputStateAndRef.add(tokenStateStateAndRef);

                    //Increment until reach the amount value
                    totalTokenAvailable.set(totalTokenAvailable.get() + tokenStateStateAndRef.getState().getData().getAmount());

                    // new value that must be created to current node
                    if(change.get() == 0 && totalTokenAvailable.get() > amount){
                        change.set(totalTokenAvailable.get() - amount);
                    }

                }).collect(Collectors.toList());

        // Validate if there is sufficient tokens to spend
        if(totalTokenAvailable.get() < amount){
            throw new FlowException("Insufficient balance");
        }
        // create new output state
        CbioState outputState = new CbioState(newOwner, amount, paidValue, getOurIdentity());

        // create transaction with the input generated by iteraction above
        TransactionBuilder txBuilder = new TransactionBuilder(getServiceHub().getNetworkMapCache()
                .getNotaryIdentities().get(0))
                .addOutputState(outputState)
                .addCommand(new CbioContract.Commands.Move(), ImmutableList.of(getOurIdentity().getOwningKey(), newOwner.getOwningKey()));
        inputStateAndRef.forEach(txBuilder::addInputState);

        // if still has balance, create a new output state for current node
        if(change.get() > 0){
            CbioState changeState = new CbioState(getOurIdentity(), change.get(), 0, null);
            txBuilder.addOutputState(changeState);
        }

        txBuilder.verify(getServiceHub());

        SignedTransaction signedTransaction = getServiceHub().signInitialTransaction(txBuilder);

        // Collect newowner signature signature
        FlowSession newOwnerSession = initiateFlow(newOwner);

        // collect signatures
        SignedTransaction fullySignedTransaction = subFlow(new CollectSignaturesFlow(signedTransaction, ImmutableList.of(newOwnerSession)));

        return subFlow(new FinalityFlow(fullySignedTransaction, ImmutableList.of(newOwnerSession)));
    }
}